---
title: "Capstone Project_Case_Study_1"
author: "Hieu-Pham"
date: "`r Sys.Date()`"
output: html_document
---

Cyclistic Bike-Share Analysis Case Study Report

1. Introduction

The aim of this analysis is to understand how casual riders and annual members use Cyclistic bikes differently. The insights will guide the development of marketing strategies to convert casual riders into annual members.

2. Business Task

Analyze the Cyclistic historical bike trip data to identify usage differences between annual members and casual riders.

The goal is to guide the marketing strategy in converting casual riders into annual members.

3. Data Sources

Cyclistic Historical Trip Data: This dataset contains 12 months of historical data, including trip duration, start and end times, user types, and more. It is made available by Motivate International Inc. under a public license.

Data Credibility: The data is provided by Cyclistic's system, ensuring its credibility. Personal identifiable information (PII) is excluded to comply with privacy and data protection policies.

4. Data Preparation

Download and Storage: The 12 months of trip data were downloaded and stored appropriately in a structured folder.

Data Cleaning: 

Combined monthly data into a single dataset. 

Created a ride_length column by subtracting started_at from ended_at. 

 Extracted the day_of_week for each ride to analyze usage patterns.

Removed duplicates and irrelevant data points.

5. Data Processing

Error Checking: Verified and corrected data integrity issues such as negative ride lengths.

Data Cleaning: Removed negative ride lengths and unnecessary columns to prepare the dataset for analysis.

Documentation: Detailed documentation of the cleaning process is provided for reproducibility.

R Code for Data Cleaning and Transformation

{r Load the libraries}
library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data
library(dplyr) #helps clean data
library(tidyverse) #helps clean data

Collect data

{r Load Divvy datasets}
# Upload Divvy datasets (csv files) here
q1_2019 <- read_csv("Divvy_Trips_2019_Q1.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")

# View the first 6 rows of each dataframe

{r}
head(q1_2019)
head(q1_2020)

Wrangle data and combine data into a single file

{r}
#====================================================
# Compare column names each of the files
# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file
colnames(q1_2019)
colnames(q1_2020)


{r}
# Rename columns  to make them consistent with q1_2020 (as this will be the supposed going-forward table design for Divvy)
q1_2019 <- rename(q1_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid
                   ,started_at = start_time
                   ,ended_at = end_time
                   ,start_station_name = from_station_name
                   ,start_station_id = from_station_id
                   ,end_station_name = to_station_name
                   ,end_station_id = to_station_id
                   ,member_casual = usertype
                   )


{r}
# Inspect the dataframes and look for incongruencies
head(q1_2019)
str(q1_2019)
str(q1_2020)


{r}
# Convert ride_id and rideable_type to character so that they can stack correctly
q1_2019 <-  mutate(q1_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 


{r}
# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q1_2019, q1_2020)

# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020
all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender,  "tripduration"))


Clean up data and add data to prepare for analysis

{r}
# Inspect the new table that has been created
colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data. Mainly for numerics

# There are a few problems we will need to fix:

(1) In the "member_casual" column, there are two names for members ("member" and "Subscriber") and two names for casual riders ("Customer" and "casual"). We will need to consolidate that from four to two labels.

(2) The data can only be aggregated at the ride-level, which is too granular. We will want to add some additional columns of data -- such as day, month, year -- that provide additional opportunities to aggregate the data.

(3) We will want to add a calculated field for length of ride since the 2020Q1 data did not have the "tripduration" column. We will add "ride_length" to the entire dataframe for consistency.

(4) There are some rides where tripduration shows up as negative, including several hundred rides where Divvy took bikes out of circulation for Quality Control reasons. We will want to delete these rides.

n the "member_casual" column, replace "Subscriber" with "member" and "Customer" with "casual"

"Level" is a special property of a column that is retained even if a subset does not contain any values from a specific level.

{r}
# Begin by seeing how many observations fall under each usertype

table(all_trips$member_casual)


{r}
# Reassign to the desired values (we will go with the current 2020 labels)
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                                ,"Subscriber" = "member"
                                ,"Customer" = "casual"))

# Check to make sure the proper number of observations were reassigned
table(all_trips$member_casual)


{r}
# Add columns that list the date, month, day, and year of each ride
# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level
# https://www.statmethods.net/input/dates.html more on date formats in R found at that link
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")


{r}
# Add a "ride_length" calculation to all_trips (in seconds)
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/difftime.html
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)

# Set the locale to English to format day_of_week correctly
Sys.setlocale("LC_TIME", "C")

# Recalculate the day_of_week in English
all_trips$day_of_week <- weekdays(all_trips$started_at)

# Inspect the structure of the columns
str(all_trips)

{r}
# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

{r}
# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
# We will create a new version of the dataframe (v2) since data is being removed
# https://www.datasciencemadesimple.com/delete-or-drop-rows-in-r-with-conditions-2/
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]

6. Data Analysis

Descriptive Analysis: Calculate key statistics such as mean, median, and mode of ride lengths. Assess differences in riding patterns between casual riders and annual members.

{r}
# Descriptive analysis on ride_length (all figures in seconds)
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride
# Condense the four lines above to one line
summary(all_trips_v2$ride_length)

{r}
# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

If the average ride length for casual riders is significantly longer than for members, it might indicate leisure use versus commuting, which is important for marketing strategies.

{r}
# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"), FUN = mean)

{r}
# Notice that the days of the week are out of order. Let's fix that.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

{r}
# Now, let's run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

{r}
# analyze ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(member_casual, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(member_casual, weekday)								# sorts



7. Visualize data

{r}
# Let's visualize the number of rides by rider type
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")


{r}
# Let's create a visualization for average duration
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")



Key Fidnings

Ride Duration: Casual riders have a longer average ride duration compared to annual members, suggesting they use the service more for leisure.

Usage Patterns: Casual riders predominantly use bikes on weekends, while annual members have more consistent usage throughout the week.

Bike Preference: Casual riders primarily use traditional bikes.

Export Summary File for Further Analysis

{r}
counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
write.csv(counts, file = 'avg_ride_length.csv')

7. Recommendations 

Weekend Promotions: Introduce weekend promotions targeting casual riders to encourage annual memberships.

Commute Benefits: Highlight the cost-saving and convenience aspects of annual memberships for daily commuting in marketing campaigns.

Digital Engagement: Use social media and email campaigns to educate casual riders on the benefits of annual memberships, such as exclusive offers.

8. Conclusion

The analysis of Cyclistic's bike-share data reveals distinct differences in usage patterns between casual riders and annual members. Targeted marketing strategies can effectively convert casual riders into annual members, fostering growth and increased profitability for Cyclistic.

